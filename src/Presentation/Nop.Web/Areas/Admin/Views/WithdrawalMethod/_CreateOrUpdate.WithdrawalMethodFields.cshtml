@model WithdrawalMethodModel

<div class="card-body">
    @if (Model.Id > 0)
    {
        @await Html.PartialAsync("Table", new DataTablesModel
    {
    Name = "withdrawal-methodField-grid",
    UrlRead = new DataUrl("WithdrawalMethodFieldList", "WithdrawalMethod", new RouteValueDictionary { [nameof(Model.WithdrawalMethodFieldSearchModel.WithdrawalMethodId)] = Model.WithdrawalMethodFieldSearchModel.WithdrawalMethodId }),
    UrlDelete = new DataUrl("WithdrawalMethodFieldDelete", "WithdrawalMethod", null),
    UrlUpdate = new DataUrl("WithdrawalMethodFieldUpdate", "WithdrawalMethod", null),
    Length = Model.WithdrawalMethodFieldSearchModel.PageSize,
    LengthMenu = Model.WithdrawalMethodFieldSearchModel.AvailablePageSizes,
    ColumnCollection = new List<ColumnProperty>
    {
    new ColumnProperty(nameof(WithdrawalMethodFieldModel.FieldName))
    {
    Title = T("Admin.Customers.Transactions.WithdrawalMethodFieldModel.FieldName").Text,
    Editable=true,
    EditType=EditType.String
    },
    new ColumnProperty(nameof(WithdrawalMethodFieldModel.IsEnabled))
    {
    Title = T("Admin.Customers.Transactions.WithdrawalMethodFieldModel.IsEnabled").Text,
    ClassName = NopColumnClassDefaults.CenterAll,
    Render=new RenderBoolean(),
    Editable = true,
    EditType = EditType.Checkbox
    },
    new ColumnProperty(nameof(WithdrawalMethodFieldModel.Id))
    {
    Title = T("Admin.Common.Edit").Text,
    Width = "200",
    ClassName =  NopColumnClassDefaults.Button,
    Render = new RenderButtonsInlineEdit()
    },
    new ColumnProperty(nameof(WithdrawalMethodFieldModel.Id))
    {
    Title = T("Admin.Common.Delete").Text,
    Width = "100",
    Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
    ClassName = NopColumnClassDefaults.Button
    }
    }
    })

        <div class="card card-default">
            <div class="card-header">
                @T("Admin.Customers.Transactions.WithdrawalMethodFieldModel.AddNew")
            </div>
            <div class="card-body">
                <script>
                    $(document).ready(function () {
                        $('#addWithdrawalMethodField').click(function () {
                            var fieldName = $("#@Html.IdFor(model => model.WithdrawalMethodFieldModel.FieldName)");
                            var isEnabled = $("#@Html.IdFor(model => model.WithdrawalMethodFieldModel.IsEnabled)");

                            if (fieldName.val() === '') {
                                $("#addWithdrawalMethodFieldAlert").click();
                                return;
                            }

                            $('#addWithdrawalMethodField').attr('disabled', true);

                            var postData = {
                                FieldName: fieldName.val(),
                                IsEnabled: isEnabled.is(':checked'),
                                WithdrawalMethodId: '@Model.WithdrawalMethodFieldSearchModel.WithdrawalMethodId'
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@(Url.Action("WithdrawalMethodFieldAdd", "WithdrawalMethod"))",
                                data: postData,
                                success: function (data, textStatus, jqXHR) {
                                    if (!data.Result) {
                                        return;
                                    }
                                    updateTable('#withdrawal-methodField-grid');
                                    fieldName.val('');
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    $("#withdrawalMethodFieldAddAlert").click();
                                },
                                complete: function (jqXHR, textStatus) {
                                    $('#addWithdrawalMethodField').attr('disabled', false);
                                }
                            });
                        });
                    });
                </script>
                <div class="form-group row">
                    <div class="col-md-3">
                        <nop-label asp-for="WithdrawalMethodFieldModel.FieldName" />
                    </div>
                    <div class="col-md-9">
                        <nop-editor asp-for="WithdrawalMethodFieldModel.FieldName" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-3">
                        <nop-label asp-for="WithdrawalMethodFieldModel.IsEnabled" />
                    </div>
                    <div class="col-md-9">
                        <nop-editor asp-for="WithdrawalMethodFieldModel.IsEnabled" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-9 offset-md-3">
                        <button type="button" id="addWithdrawalMethodField" class="btn btn-primary">@T("Admin.WithdrawalMethodField.AddButton")</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card card-default">
            <div class="card-body" id="product-pictures-area">
                @T("Admin.WithdrawalMethodField.SaveBeforeEdit")
            </div>
        </div>
    }
</div>
<nop-alert asp-alert-id="addWithdrawalMethodFieldAlert" asp-alert-message="@T("Admin.WithdrawalMethodField.Alert.AddNew")" />
<nop-alert asp-alert-id="withdrawalMethodFieldAddAlert" asp-alert-message="@T("Admin.WithdrawalMethodField.Alert.WithdrawalMethodFieldAdd")" />