@model AnalyticsModel
@using Nop.Services.Localization
@using Nop.Core
@inject ILocalizationService localizationService
@inject IStoreContext storeContext

@{
    Layout = "_CustomLayout";

    var homepageTitle = await localizationService.GetLocalizedAsync(await storeContext.GetCurrentStoreAsync(), s => s.HomepageTitle);

    //title
    NopHtml.AddTitleParts(T("PageTitle.Analytics").Text);

    //page class
    NopHtml.AppendPageCssClassParts("html-analytics-page");
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/data.js"></script>
    <script src="https://code.highcharts.com/modules/drilldown.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>


<style>
    .highcharts-data-labels text,.highcharts-axis-labels text,.highcharts-button text,.highcharts-title{
        text-decoration: none !important;
        color: #666666 !important;
        fill: #666666 !important;
    }
    .highcharts-grid-line{
        stroke: #333333 !important;
    }
    .highcharts-axis-line{
        stroke: #424242;
    }
    .highcharts-background{
        fill: #282b31 !important;
    }

    .bar-chart-box { 
        padding: 0px;
        background-color: #282b31;
        border: 1px solid transparent;
    } 
    .highcharts-a11y-proxy-group button {
        background-color:#282b31 !important;
        fill: #282b31 !important;
    }
    .chart-fitler-block select{ min-width: 100px; }
    .highcharts-text-outline{stroke: none;}
</style>

<div class="page">

    <div class="custom-tabs-wrapper">
        <div class="tabs-header">
            <h2 class="tabs-heading">@T("Account.analytics")</h2>
            <div class="tabs-navigation">
                <ul>
                    <li class="active">
                        <a href="javascript:void(0)" data-id="MonthlyGaine">@T("Account.analysis.chart")</a>
                    </li>
                    <li>
                        <a href="javascript:void(0)" data-id="TrandingReport"> @T("Account.analysis.tradingreports")</a>
                    </li>
                    <li>
                        <a href="javascript:void(0)" data-id="Statements"> @T("Account.Statements")</a>
                    </li> 
                </ul>
            </div>
        </div>
        <div class="tabs-content">
            <div id="MonthlyGaine" class="tab from-left-animation active">
                <div class="row mt-4">
                    <div class="col-xl-12">
                        <div class="bar-chart-box w-100 p-2">
                            <div id="chartFilters" class="d-flex justify-content-between w-100 mb-3 pb-2 chart-fitler-block form-block"> </div>
                            <figure class="highcharts-figure">
                                <div id="analyticsChart"></div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
            <div id="TrandingReport" class="tab from-left-animation">
                <div class="row">
                    <div class="col-xl-12">
                        <h1 class="pt-4">@T("account.feature.comingsoon")</h1>
                    </div>
                </div>
            </div>
            <div id="Statements" class="tab from-left-animation">
                <div class="row">
                    <div class="col-xl-12">
                        <h1 class="pt-4">@T("account.feature.comingsoon")</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@*@Html.Raw(Model.Year);*@


<script>
    var yearArray = ''; 
    var monthgainArray = @Html.Raw(Model.MonthsAndGain);
    console.log('monthgainArray', monthgainArray);

    function hashCode(str) { 
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        return hash;
    } 

    function intToRGB(i){
        var c = (i & 0x00FFFFFF)
            .toString(16)
            .toUpperCase();

        return "00000".substring(0, 6 - c.length) + c;
    }
    
    function createChartFilter(){
        var html = '';
        var option_html = "";
        monthgainArray.groupedReturnTransactions.forEach((item) => {
            option_html += '<option value="'+item.name+'">'+item.name+'</option>';
        });
        html = `
            <div class="inputs border-0 py-1 d-flex flex-column align-items-start">
                <label>Year</label>
                <select class="form-control w-auto" id="filterByMonth">${option_html}</select>
            </div>
            <div class="inputs border-0 py-1 d-flex flex-column align-items-start">
                <label>Change</label>
                <select class="form-control w-auto" id="filterBycurrency">
                    <option value="%">Income %</option>
                    <option value="amount">Income Amount</option>
                </select>
            </div> 
        `;
        $("#chartFilters").html(html);
    }


    function chartFilter(value,type){
        var chartColors = [];
        var data_Array = [];
        var dataArray = monthgainArray.groupedReturnTransactions.find(x => x.name == value);
    
        var currenySymbol = "";
        var percentage_Symbol = "%";

         if(type == "amount"){
            currenySymbol = monthgainArray.currenySymbol;
            percentage_Symbol = "";
        }

        dataArray.data.forEach((item) => {
            chartColors.push("#"+intToRGB(hashCode(item[0])));
        });

        dataArray.data.forEach((item) => {
            var itemArray = [];
            if(type == "%"){
                itemArray.push(item[0], item[1]);
            }
            else if(type == "amount"){ 
                itemArray.push(item[0], parseFloat(item[2]));
            }
            data_Array.push(itemArray);
        });
        console.log("data_Array ",data_Array);
        var chart = Highcharts.chart('analyticsChart', {
            title: { align: 'center', text: '' },
            chart: { type: 'column' },
            colors: chartColors, 
            accessibility: { announceNewData: { enabled: true } },
            xAxis: { type: 'category' },
            legend: { enabled: false },
            plotOptions: {
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '<span>'+currenySymbol+' {point.y:.2f} '+percentage_Symbol+'</span>'
                    }
                }
            },
            series: [{
                name: dataArray.name,
                colorByPoint: true,
                data: data_Array,
                dataLabels: {
                    enabled: true,
                    format: currenySymbol+' {point.y:.2f} '+percentage_Symbol
                }
            }],
            tooltip: {
                headerFormat: '<span style="font-size:15px;color: #333;">{point.name}</span><br>',
                pointFormat: '<span style="font-size:15px;color:{point.color}">{point.name}</span>: <b>'+currenySymbol+' {point.y:.2f} '+percentage_Symbol+'</b> of total<br/>'
            }
        });
    }

    $(document).on("change","#filterByMonth,#filterBycurrency",function(){ 
        var filterByMonth = $("#filterByMonth")
        var filterBycurrency = $("#filterBycurrency");
        chartFilter(filterByMonth.val(),filterBycurrency.val());
    });

    
    $(function(){
        createChartFilter();
        chartFilter($("#filterByMonth").val(),"%");
    });

    /* //old chart 
    var chartColors = ['#21ce99', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
    var chart = Highcharts.chart('analyticsChart', {
        title: {
            align: 'center',
            text: ''
        },
        chart: {
            type: 'column'
        },
        colors: chartColors, 
        accessibility: {
            announceNewData: {
                enabled: true
            }
        },
        xAxis: {
            type: 'category'
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            series: {
                borderWidth: 0,
                dataLabels: {
                    enabled: true,
                    format: '{point.y:.1f}%'
                }
            }
        },
        series: [{
            name: yearArray.name,
            colorByPoint: true,
            data: yearArray,
            dataLabels: {
                enabled: true,
                format: '{point.y:.1f}%'
            }
        }],
        tooltip: {
            headerFormat: '<span style="font-size:11px">{point.name}</span><br>',
            pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'
        },
        drilldown: {
            series: monthgainArray
        }
    });
    */



</script>
